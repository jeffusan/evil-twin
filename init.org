
#+title: My Emacs Configuration
#+AUTHOR: Jeff Hemminger
#+EMAIL: jeff@kropek.org
#+STARTUP: indent
#+LANGUAGE: en
#+BABEL: :cache yes

** TODO
- [ ] review to understand the search functionality
- [ ] review ibuffer settings
- [ ] review hippie-expand
- [X] figure out why you can't load flycheck
- [X] figure out the ibuffer warning on load

* Preamble

While I have used emacs for quite a while, I don't write a lot of my own code.
The credit from anything you find useful here can go to one of three people:

1. [[http://www.sanityinc.com/][Steve Purcell]] - this guy has [[https://github.com/purcell/emacs.d][some good emacs]]!

2. [[https://justin.abrah.ms/][Justin Ambrahms]] - [[https://github.com/justinabrahms/.emacs.d][mighty fine emacs]]!

3. [[http://bodil.lol/][Bodil Stokke]] - [[https://github.com/bodil/ohai-emacs][this is high quality ohai-emacs]]!

Marking all blatant plagiarism from here forward would be exhausting. It all comes from one of the above mentioned three.
If any of the three actually ever see this- /chapeau-bas, génie!/

* Getting Started

*** Lightning-fast quick-start

#+BEGIN_SRC emacs-lisp
M-x org-babel-load-file init.org
#+END_SRC

*** Basic setup: init.el
I instruct init.el to babel-load my init.org file, and load a theme.
It may not be the fastest way to do it, but I haven't found it to be an issue.
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/evil-twin/init.org")
#+END_SRC


* The emacs starts here.

This is my literate emacs config.

** Package Management

Add package management repositories and initialize.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
(setq package-archives '(
  ("org" . "http://orgmode.org/elpa/")
  ("gnu" . "http://elpa.gnu.org/packages/")
  ("melpa" . "http://melpa.org/packages/")
  ("marmalade" . "https://marmalade-repo.org/packages/")
))
(setq package-check-signature nil)
(package-initialize)
#+END_SRC

Add [[https://github.com/Malabarba/paradox][Paradox]].

#+BEGIN_SRC emacs-lisp :tangle yes
(when (not (package-installed-p 'paradox))
  (package-install 'paradox))

(paradox-require 'use-package)

(require 'use-package)

(setq use-package-always-ensure t)
#+END_SRC

** Basic configuration

Default configuration settings. Other things that don't really deserve a heading of their own.

#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)

(setq scroll-bar-mode nil)

(tool-bar-mode -1)

(set-frame-parameter nil 'fullscreen 'maximized)
(setq redisplay-dont-pause t)

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode -1)
  (mouse-wheel-mode t)
  (blink-cursor-mode -1))

;;; seriously the most annoying functionality ever invented,
;;; could only have been made by Ruby devs
(setq ruby-insert-encoding-magic-comment nil)

(set-default 'indent-tabs-mode nil)

(setq sentence-end-double-space nil)

(define-key global-map (kbd "RET") 'newline-and-indent)
;; turn this off or ethan will complain relentlessly
(setq mode-require-file-newline nil)
(use-package ethan-wspace
  :demand t
  :commands global-ethan-wspace-mode
  :config
  (global-ethan-wspace-mode 1)
  :bind ("C-c c" . ethan-wspace-clean-all)
  :diminish ethan-wspace-mode)


;; Automatically update unmodified buffers whose files have changed.
(global-auto-revert-mode 1)

#+END_SRC

*** Load Theme

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package material-theme)
(load-theme 'material)
(require 'term)
(set-face-background 'default "#000")
(set-face-background 'region "#223355")
(set-face-background 'fringe "#000")
;(set-face-foreground 'which-func "#7f9f7f")
(set-face-foreground 'term-color-black "#3f3f3f")
(set-face-foreground 'term-color-red "#cc9393")
(set-face-foreground 'term-color-green "#7f9f7f")
(set-face-foreground 'term-color-yellow "#f0dfaf")
(set-face-foreground 'term-color-blue "#8cd0d3")
(set-face-foreground 'term-color-magenta "#dc8cc3")
(set-face-foreground 'term-color-cyan "#93e0e3")
(set-face-foreground 'term-color-white "#dcdccc")

(run-hooks 'evil-twin-appearance/hook)

#+END_SRC

*** linum
linum by default enable and highlight the current line
in the linum area.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Show line numbers in buffers.
(global-linum-mode t)
(setq linum-format (if (not window-system) "%4d " "%4d"))

;; Highlight the line number of the current line.
(use-package hlinum
  :config
  (hlinum-activate))

;; Show column numbers in modeline.
(setq column-number-mode t)

;; Ensure linum-mode is disabled in certain major modes.
(setq linum-disabled-modes
      '(term-mode slime-repl-mode magit-status-mode help-mode nrepl-mode
        mu4e-main-mode mu4e-headers-mode mu4e-view-mode
        mu4e-compose-mode))
(defun linum-on ()
  (unless (or (minibufferp) (member major-mode linum-disabled-modes))
    (linum-mode 1)))

#+END_SRC

*** modeline tweak
Show the current function in the modeline.

#+BEGIN_SRC emacs-lisp :tangle yes
(which-function-mode)
#+END_SRC

Highlight matching braces.
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1)
#+END_SRC

*** Nyan cat

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nyan-mode
  :config
  (nyan-mode 1)
  (setq nyan-bar-length 16
        nyan-wavy-trail t))

#+END_SRC

*** Unclutter modeline

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package diminish)

(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "autopair" '(diminish 'autopair-mode))
(eval-after-load "abbrev" '(diminish 'abbrev-mode))
(eval-after-load "auto-indent-mode" '(diminish 'auto-indent-minor-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(defadvice emacs-lisp-mode (after elisp-rename-modeline activate)
  (setq mode-name "ELisp"))
#+END_SRC

[[https://gist.github.com/jwiegley/8ae7145ba5ce64250a05][Handle ANSI colours in compile buffer output]].

#+BEGIN_SRC emacs-lisp :tangle yes
(defun compilation-ansi-color-process-output ()
  (ansi-color-process-output nil)
  (set (make-local-variable 'comint-last-output-start)
       (point-marker)))
(add-hook 'compilation-filter-hook #'compilation-ansi-color-process-output)
#+END_SRC

** Tab Width and Indentation

#+BEGIN_SRC emacs-lisp :tangle yes

(setq-default tab-width 4)
;; Python
(setq-default py-indent-offset 2)

#+END_SRC

** Company Mode

Company-mode and associations

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :demand t
  :commands company-mode
  :config
  ;; Enable company-mode globally.
  (global-company-mode)
  ;; Except when you're in term-mode.
  (setq company-global-modes '(not term-mode))
  ;; Give Company a decent default configuration.
  (setq company-minimum-prefix-length 2
        company-selection-wrap-around t
        company-show-numbers t
        company-tooltip-align-annotations t
        company-require-match nil
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil)
  ;; Sort completion candidates that already occur in the current
  ;; buffer at the top of the candidate list.
  (setq company-transformers '(company-sort-by-occurrence))
  ;; Show documentation where available for selected completion
  ;; after a short delay.
  (use-package company-quickhelp
    :config
    (setq company-quickhelp-delay 1)
    (company-quickhelp-mode 1))
  ;; Add a completion source for emoji. 😸
  (use-package company-emoji
    :config
    (company-emoji-init))
  ;; Company's default colours look OK with the light scheme,
  ;; but hideous with the dark one, so let's pick something nicer.
  (add-hook
   'evil-twin-appearance/hook
   (lambda ()
     (set-face-foreground 'company-tooltip "#000")
     (set-face-background 'company-tooltip "#ddd")
     (set-face-background 'company-scrollbar-bg "#fff")
     (set-face-background 'company-scrollbar-fg "#999")
     (set-face-background 'company-tooltip-selection "#aaa")
     (set-face-foreground 'company-tooltip-common "#9a0000")
     (set-face-foreground 'company-tooltip-common-selection "#9a0000")
     (set-face-foreground 'company-tooltip-annotation "#00008e")))
  ;; Use C-\ to activate the Company autocompleter.
  ;; We invoke company-try-hard to gather completion candidates from multiple
  ;; sources if the active source isn't being very forthcoming.
  (use-package company-try-hard
    :commands company-try-hard
    :bind ("C-\\" . company-try-hard)
    :config
    (bind-keys :map company-active-map
               ("C-\\" . company-try-hard)))
  :diminish company-mode)

#+END_SRC

** Multiple Cursors
- Use <insert> to place a cursor on the next match for the current selection.
- Use S-<insert> to place one on the previous match.
- Use C-' to use extended mark mode, giving you more control.
- Use C-" to place cursors on all matches.
- Select a region and C-M-' to place cursors on each line of the selection.
- Bonus: <insert> key no longer activates overwrite mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :commands multiple-cursors-mode
  :config
  ;; MC has `mc-hide-unmatched-lines-mode' bound to C-', which interferes
  ;; with our ability to add more cursors, so we'll just clear the binding.
  ;; TODO: add `mc-hide-unmatched-lines-mode' back somewhere else?
  (bind-keys :map mc/keymap
             ("C-'" . nil))
  :bind (("<insert>" . mc/mark-next-like-this)
     ("S-<insert>" . mc/mark-previous-like-this)
     ("C-'" . mc/mark-more-like-this-extended)
     ("C-\"" . mc/mark-all-like-this-dwim)
	 ("C-M-'" . mc/edit-lines)))

#+END_SRC

- Use C-= to select the innermost logical unit your cursor is on.
- Keep hitting C-= to expand it to the next logical unit.
- Protip: this goes really well with multiple cursors.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package expand-region
  :commands er/expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC

Remap join-line to M-j where it's easier to get to.
join-line will join the line you're on with the line above it in a reasonable manner for the type of file you're editing.
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "M-j") 'join-line)
#+END_SRC

C-c <tab> to auto-indent the entire buffer you're in.
#+BEGIN_SRC emacs-lisp :tangle yes
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))
(global-set-key (kbd "C-c <tab>") 'indent-buffer)
#+END_SRC

Automatic braces insert
#+BEGIN_SRC emacs-lisp :tangle yes
(electric-pair-mode 1)
#+END_SRC

*** Duplicate Start of Line Or Region
http://www.emacswiki.org/emacs/DuplicateStartOfLineOrRegion
C-M-<end>
#+BEGIN_SRC emacs-lisp :tangle yes
(defun duplicate-start-of-line-or-region ()
  (interactive)
  (if mark-active
      (duplicate-region)
    (duplicate-start-of-line)))
(defun duplicate-start-of-line ()
  (if (bolp)
      (progn
        (end-of-line)
        (duplicate-start-of-line)
        (beginning-of-line))
    (let ((text (buffer-substring (point)
                                  (beginning-of-thing 'line))))
      (forward-line)
      (push-mark)
      (insert text)
      (open-line 1))))
(defun duplicate-region ()
  (let* ((end (region-end))
         (text (buffer-substring (region-beginning) end)))
    (goto-char end)
    (insert text)
    (push-mark end)
    (setq deactivate-mark nil)
    (exchange-point-and-mark)))
(global-set-key (kbd "C-M-<end>") 'duplicate-start-of-line-or-region)
#+END_SRC

*** Hack for setting a fixed wrap column in visual-line-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(defun set-visual-wrap-column (new-wrap-column &optional buffer)
  "Force visual line wrap at NEW-WRAP-COLUMN in BUFFER (defaults
    to current buffer) by setting the right-hand margin on every
    window that displays BUFFER.  A value of NIL or 0 for
    NEW-WRAP-COLUMN disables this behavior."
  (interactive (list (read-number "New visual wrap column, 0 to disable: " (or visual-wrap-column fill-column 0))))
  (if (and (numberp new-wrap-column)
           (zerop new-wrap-column))
      (setq new-wrap-column nil))
  (with-current-buffer (or buffer (current-buffer))
    (visual-line-mode t)
    (set (make-local-variable 'visual-wrap-column) new-wrap-column)
    (add-hook 'window-configuration-change-hook 'update-visual-wrap-column nil t)
    (let ((windows (get-buffer-window-list)))
      (while windows
        (when (window-live-p (car windows))
          (with-selected-window (car windows)
            (update-visual-wrap-column)))
        (setq windows (cdr windows))))))
(defun update-visual-wrap-column ()
  (if (not visual-wrap-column)
      (set-window-margins nil nil)
    (let* ((current-margins (window-margins))
           (right-margin (or (cdr current-margins) 0))
           (current-width (window-width))
           (current-available (+ current-width right-margin)))
      (if (<= current-available visual-wrap-column)
          (set-window-margins nil (car current-margins))
        (set-window-margins nil (car current-margins)
                            (- current-available visual-wrap-column))))))

#+END_SRC

** Paredit

Set C-c v to eval the whole buffer in all lisps.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package paredit
  :commands paredit-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)
  :diminish paredit-mode)

;; Highlight the sexp under the cursor.
(use-package highlight-parentheses
  :commands highlight-parentheses-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-parentheses-mode)
  :diminish highlight-parentheses-mode)

;; When saving an elisp file, remove its compiled version if
;; there is one, as you'll want to recompile it.
(defun ohai-elisp/remove-elc-on-save ()
  "If you're saving an elisp file, likely the .elc is no longer valid."
  (make-local-variable 'after-save-hook)
  (add-hook 'after-save-hook
            (lambda ()
              (if (file-exists-p (concat buffer-file-name "c"))
                  (delete-file (concat buffer-file-name "c"))))))
(add-hook 'emacs-lisp-mode-hook 'ohai-elisp/remove-elc-on-save)

;; Enable eldoc mode, which provides context based documentation
;; in the minibuffer.
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)

;; Use M-. to jump to the definition of the symbol under the cursor.
(define-key emacs-lisp-mode-map (kbd "M-.") 'find-function-at-point)

#+END_SRC

** Emoji support

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package emojify
  :config
  ;; Set emojify to only replace Unicode emoji, and do it everywhere.
  (setq emojify-emoji-styles '(unicode)
        emojify-inhibit-major-modes '())
  ;; Enable it globally.
  (add-hook 'after-init-hook #'global-emojify-mode))

;; Patch emojify to replace emoji everywhere in programming modes.
(defun emojify-valid-prog-context-p (beg end) 't)

#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp :tangle yes
;; Define a keybinding to get to your eshell quickly.
(global-set-key (kbd "C-c e") 'eshell)

;; Visual commands are commands which require a proper terminal.
;; eshell will run them in a term buffer when you invoke them.
(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

;; Define a pretty prompt.
(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'powerline))

(setq eshell-cmpl-cycle-completions nil)

#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
  :config
  ;; Start it automatically for all modes except ELisp mode,
  ;; where the linter is just designed to make you mad.
  (add-hook 'find-file-hook
            (lambda ()
              (when (not (equal 'emacs-lisp-mode major-mode))
                (flycheck-mode)))))

;; Turn the modeline red when Flycheck has errors.
(use-package flycheck-color-mode-line
  :config
  (with-eval-after-load "flycheck"
    (setq flycheck-highlighting-mode 'symbols)
    (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)))

;; Configure the theme.
(add-hook
 'evil-twin-appearance/hook
 (lambda ()
   (with-eval-after-load "flycheck"
     (set-face-background 'flycheck-error "#660000")
     (set-face-foreground 'flycheck-error nil)
     (set-face-background 'flycheck-warning "#331800")
     (set-face-foreground 'flycheck-warning nil)
     (require 'flycheck-color-mode-line)
     (set-face-background 'flycheck-color-mode-line-error-face "#440000")
     (set-face-background 'flycheck-color-mode-line-warning-face "#553300")
     (set-face-background 'flycheck-color-mode-line-info-face nil)
     (set-face-foreground 'flycheck-color-mode-line-error-face "#ffffff")
     (set-face-foreground 'flycheck-color-mode-line-warning-face "#ffffff")
     (set-face-foreground 'flycheck-color-mode-line-info-face nil))))

(with-eval-after-load "helm"
  (use-package helm-flycheck
    :bind (("C-c ! !" . helm-flycheck))))

#+END_SRC
** Ido
#+BEGIN_SRC emacs-lisp :tangle yes
;; Enable ido-mode.
(ido-mode t)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-use-url-at-point t
      ido-max-prospects 10
      ido-use-virtual-buffers t)

;; Make sure ido is really everywhere.
(use-package ido-ubiquitous
  :config
  (ido-ubiquitous-mode))


;; Use smex to provide ido-like interface for M-x
(use-package smex
  :config
  (smex-initialize)
  :bind (("M-x" . smex)
         ("M-X" . smex-major-mode-commands)
         ;; This is the old M-x.
         ("C-c C-c M-x" . execute-extended-command)))

;; Vertical ido.
(use-package ido-vertical-mode
  :config
  (ido-vertical-mode))

;; Improved fuzzy matching.
(use-package flx-ido
  :config
  (flx-ido-mode 1)
  (setq ido-enable-flex-matching t
        ido-use-faces nil
        gc-cons-threshold 20000000))

;; Bind C-t to use ido to jump to a symbol in the current buffer.
(use-package imenu)
(defun ido-imenu ()
  "Update the imenu index and then use ido to select a symbol to navigate to.
Symbols matching the text at point are put first in the completion list."
  (interactive)
  (imenu--make-index-alist)
  (let ((name-and-pos '())
        (symbol-names '()))
    (flet ((addsymbols (symbol-list)
                       (when (listp symbol-list)
                         (dolist (symbol symbol-list)
                           (let ((name nil) (position nil))
                             (cond
                              ((and (listp symbol) (imenu--subalist-p symbol))
                               (addsymbols symbol))

                              ((listp symbol)
                               (setq name (car symbol))
                               (setq position (cdr symbol)))

                              ((stringp symbol)
                               (setq name symbol)
                               (setq position (get-text-property 1 'org-imenu-marker symbol))))

                             (unless (or (null position) (null name))
                               (add-to-list 'symbol-names name)
                               (add-to-list 'name-and-pos (cons name position))))))))
      (addsymbols imenu--index-alist))
    ;; If there are matching symbols at point, put them at the beginning of `symbol-names'.
    (let ((symbol-at-point (thing-at-point 'symbol)))
      (when symbol-at-point
        (let* ((regexp (concat (regexp-quote symbol-at-point) "$"))
               (matching-symbols (delq nil (mapcar (lambda (symbol)
                                                     (if (string-match regexp symbol) symbol))
                                                   symbol-names))))
          (when matching-symbols
            (sort matching-symbols (lambda (a b) (> (length a) (length b))))
            (mapc (lambda (symbol) (setq symbol-names (cons symbol (delete symbol symbol-names))))
                  matching-symbols)))))
    (let* ((selected-symbol (ido-completing-read "Symbol? " symbol-names))
           (position (cdr (assoc selected-symbol name-and-pos))))
      (goto-char position))))

(set-default 'imenu-auto-rescan t)
(global-set-key (kbd "C-t") 'ido-imenu)

;; Bind `~` to go to homedir when in ido-find-file.
;; From http://whattheemacsd.com/setup-ido.el-02.html
(add-hook 'ido-setup-hook
          (lambda ()
            ;; Go straight home
            (define-key ido-file-completion-map
              (kbd "~")
              (lambda ()
                (interactive)
                (if (looking-back "/")
                    (insert "~/")
                  (call-interactively 'self-insert-command))))))

#+END_SRC

** Font sizing

#+BEGIN_SRC emacs-lisp :tangle yes

(defun ohai-fonts/spec-to-list (spec)
  (s-split "-" spec))

(defun ohai-fonts/list-to-spec (spec)
  (s-join "-" spec))

(defun ohai-fonts/update-font-spec-size (spec increment)
  (ohai-fonts/list-to-spec
   (-update-at 7 (lambda (i) (number-to-string
                              (+ (string-to-number i) increment)))
               (ohai-fonts/spec-to-list spec))))

(defun ohai-fonts/update-font-size (increment)
  (set-frame-font
   (ohai-fonts/update-font-spec-size (frame-parameter nil 'font) increment)))

(global-set-key (kbd "C-M--") (lambda () (interactive)
                                (ohai-fonts/update-font-size -1)))
(global-set-key (kbd "C-M-=") (lambda () (interactive)
                                (ohai-fonts/update-font-size 1)))

#+END_SRC

*** Make sure to always use UTF0-8

#+BEGIN_SRC emacs-lisp :tangle yes

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(load-library "iso-transl")

#+END_SRC
** Json-mode

C-c <tab> to beautify

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package json-mode
  :commands json-mode
  :config
  (bind-keys :map json-mode-map
             ("C-c <tab>" . json-mode-beautify)))

#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :commands markdown-mode
  :mode (("\\.markdown$" . markdown-mode)
         ("\\.md$" . markdown-mode)))

#+END_SRC
** Window Switching

- Enhance C-x o when more than two windows are open.
- Use C-x M-p to kill the buffer in the other window, revealing the next buffer in the stack.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package ace-window
  :bind (("C-x o" . ace-window)
         ("C-x C-o" . ace-swap-window))
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

(global-set-key
 (kbd "C-x M-p")
 (lambda () (interactive)
   (save-excursion
     (other-window 1)
     (quit-window))))

#+END_SRC
** Anzu

Display incremental search stats in the modeline.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package anzu
  :demand t
  :config
  (global-anzu-mode 1)
  ;; Anzu provides a version of `query-replace' and friends which give visual
  ;; feedback when composing regexps. Let's replace the regular versions.
  :bind(("C-%" . anzu-query-replace-at-cursor)
        ("M-%" . anzu-query-replace)
        ("C-M-%" . anzu-query-replace-regexp))
  :diminish anzu-mode)

#+END_SRC
** Smart Line

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package "smart-mode-line"
  :commands sml/setup
  :demand t
  :init
  (setq sml/theme 'respectful
        sml/shorten-directory t
        sml/shorten-modes t
        sml/name-width 40
        sml/mode-width 'full)
  :config
  (nyan-mode 0)
  (sml/setup))

#+END_SRC

** Snippets


#+BEGIN_SRC emacs-lisp :tangle yes
;; The s.el package contains a lot of functions useful in snippets.
(use-package s)

;; Install yasnippet and make it available globally.
;; Read about it here: http://capitaomorte.github.io/yasnippet/
(use-package yasnippet
  ;;:commands yas-global-mode
  :config
  (yas-global-mode 1)
  :diminish yas-minor-mode)

#+END_SRC

** System Start

#+BEGIN_SRC emacs-lisp :tangle yes
(defun ohai-splash/inject-help-text ()
  (with-current-buffer (get-buffer "*scratch*")
    (end-of-buffer)
    (delete-region 1 (point))
    (insert ";; Blessed art thou, who hath come to the One True Editor.")))

(defun ohai-splash/go ()
  (ohai-splash/inject-help-text)
)

(when window-system
  (setq initial-buffer-choice 'ohai-splash/go))

#+END_SRC

** Unicode fonts
We use the `unicode-fonts' package to set everything up. Beware that the `unicode-fonts-setup' function takes a while to run, which is why this module isn't on by default.

You'll need to make sure the necessary fonts are installed for this to work. See https://github.com/rolandwalker/unicode-fonts/#quickstart

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package unicode-fonts
  :config
  (unicode-fonts-setup))

#+END_SRC
** ORG
my org-mode config
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-directory "~/Dropbox/orgs/")
(setq org-default-notes-file "~/Dropbox/orgs/.notes")
(define-key global-map "\C-cc" 'org-capture)
;;templates
(setq org-capture-templates
  '(
    ("t" "Todo" entry (file+headline "~/Dropbox/orgs/gtd/newgtd.org" "Tasks") "* TODO %^{Brief Description} %^g\n%?\nAdded: %U\n %i\n %a\n\n")
    ("j" "Journal" entry (file_datetree "~/Dropbox/orgs/gtd/journal.org") "* %?\Entered on %U\n %i\n %a")
    ("p" "Project" entry (file+headline "~/Dropbox/orgs/gtd/newgtd.org" "Projects") "* %^{Brief Description} %^g\n%?\nAdded: %U\n %i\n %a")
    ("d" "Daily Report" entry (file+headline "~/Dropbox/orgs/gtd/journal.org" "Daily Report") "* %t 【Daily Report】 ジェフ \n%[~/Dropbox/orgs/.daily_report.txt]\n")
    ("s" "Someday" entry (file+headline "~/Dropbox/orgs/gtd/someday.org" "Someday") "* TODO %^{Brief Description} %^\n%?\nAdded: %U\n %i\n %a\n\n")))


;; settings
(setq org-src-fontify-natively t)
(setq org-log-done t)
(setq org-log-repeat "time")
(setq org-agenda-include-diary nil)
(setq org-deadline-warning-days 7)
(setq org-timeline-show-empty-dates t)
(setq org-insert-mode-line-in-empty-file t)
(setq org-replace-disputed-keys t)

;; refile settings
(setq org-refile-targets
      (quote
       (
        ("~/Dropbox/orgs/gtd/refiled.org" :maxlevel . 1)
        ("~/Dropbox/orgs/gtd/someday.org" :level . 1)
        ("~/Dropbox/orgs/gtd/follow_up.org" :level . 1)
       )
      )
      )

(setq org-agenda-files
 (quote
  (
   "~/Dropbox/orgs/gtd/newgtd.org"
   "~/Dropbox/orgs/gtd/calendar.org"
   )
  )
 )

;; Always use visual-line-mode in org-mode, and wrap it at column 80.
(add-hook 'org-mode-hook
   (lambda ()
     (visual-line-mode 1)
     (set-visual-wrap-column 80)))

;; Fancy bullet rendering.
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;; Insert links from clipboard.
(use-package org-cliplink
  :config
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c M-l") 'org-cliplink)))

#+END_SRC

*** Projectile

Learn about Projectile: http://batsov.com/projectile/

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :demand t
  :commands projectile-global-mode
  :config
  (projectile-global-mode)
  ;; Use C-c C-f to find a file anywhere in the current project.
  :bind ("C-c C-f" . projectile-find-file)
  :diminish projectile-mode)

#+END_SRC

*** Rich Minority

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package "rich-minority"
  :commands rich-minority-mode
  :demand t
  :init
  (setq rm-blacklist '(" Helm" " Guide" " $" " ," " Tern" " Ind" " alchemist"
                       " Monroe" " cljr" " Wrap" " Doc"))
  :config
  (rich-minority-mode 1))

#+END_SRC
** Git
- Hint: customize `magit-repo-dirs' so that you can use C-u M-F12 to quickly open magit on any one of your projects.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package magit
  :commands magit-status
  :bind ("C-x g" . magit-status))

(use-package gitignore-mode)
(use-package gitconfig-mode)

(setq-default
 magit-save-some-buffers nil
 magit-process-popup-time 10
 magit-diff-refine-hunk t
 magit-completing-read-function 'magit-ido-completing-read)

(global-set-key [(meta f12)] 'magit-status)

(add-hook 'git-commit-mode-hook 'goto-address-mode)

(diminish 'magit-auto-revert-mode)
(add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))

;; Use M-x gist-buffer or M-x gist-region to create a gist
;; directly from the current buffer or selection.
(use-package gist)

;; Mark uncommitted changes in the fringe.
(use-package git-gutter-fringe
  :config
  (global-git-gutter-mode t)
  :diminish git-gutter-mode)

#+END_SRC
